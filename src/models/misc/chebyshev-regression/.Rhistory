install.packages('Learnbayes')
install.packages('LearnBayes')
library(LearnBayes)
blinreg
?skink
?sink
sink('blinreg')
print(blinreg)
sink()
require(devtools)
install.packages('devtools')
install.packages('RCurl')
install.packages('RCurl')
install.packages('devtools')
install_github("slidify", "ramnathv")
require(devtools)
install_github("slidify", "ramnathv")
.Options$unzip
install.packages('knitr')
library(knitr)
library(slidify)
require(boot)
?boot
?boot.ci
install.packages('inline')
install.packages('Rcpp')
library(inline)
library(Rcpp)
src <- '
std::vector<std::string> s;
s.push_back("hello");
s.push_back("world");
return Rcpp::wrap(s);
'
hellofun <- cxxfunction(body = src, includes = '', plugin = 'Rcpp', verbose = FALSE)
cat(hellofun(), '\n')
options(repos = c(getOption("repos"), rstan = "http://wiki.rstan-repo.googlecode.com/git/"))
install.packages('rstan', type = 'source', INSTALL_opts = "--merge-multiarch")
library(rstan)
?stan
setwd("~/stan/src/models/misc/chebyshev-regression")
dir()
fit <- read_stan_csv(samples.csv)
fit <- read_stan_csv('samples.csv')
str(fit)
plot(fit)
ls()
dataset <- as.data.frame.stanfit(fit)
require(rstan)
dim(fit)
d <- as.data.frame(fit)
str(d)
qplot(d, coefs[1], lp__)
require(ggplot2)
qplot(d, coefs[1], lp__)
d$coefs[1]
d[,1]
colnames(d)
plot(fit)
require(chebpol)
f <- function(x) cos(3*pi*x)/(1+25*(x-0.25)^2) # funtion to approximate
f <- function(x) x^2 # funtion to approximate
# Make a standard Chebyshev interpolation
y_obs <- evalongrid(f,20) # f evaluation on 50 knots (Chebyshev grid)
coef <- chebcoef(y) # Chebyshev coefs
y_obs <- as.numeric(y_obs)
coef <- chebcoef(y_obs) # Chebyshev coefs
coef
tch <- Vectorize(function(x) chebeval(x,coef)) # Given Chebyshev coefficients,
x_obs <- chebknots(20)[[1]] # using 50 knots for clarity in the process
plot(x_obs,f(x_obs), type = 'p')
lines(x_obs,tch(x_obs),col='blue')
class(x_obs)
print(fit)
print(fit)
fit.des <- print(fit)
ls()
str(fit.des)
rm(fit.des)
require(rstan)
?stan
get_num_upars(fit)
str(fit)
show(fit)
summary(fit)
traceplot(fit)
get_posterior_mean(fit)
get_posterior_mean(object="fit")
get_posterior_mean(object="fit",1)
get_stancode(fit)
adaptinfo <- get_adaptation_info(exfit)
adaptinfo <- get_adaptation_info(fit)
fit
adaptinfo
get_seed(exfit)
get_seed(fit)
get_sampler_params(fit)
get_posterio_mean
get_posterior_mean
stanfit <- read_stan_csv(samples.csv)
?read_stan_csv
summary(stanfit)
stanfit <- read_stan_csv('samples.csv')
plot(stanfit)
summary(stanfit)
summary("stanfit")
summary("stanfit")
plot("stanfit")
summary(stanfit)
get_posteior_mean(stanfit,pars=1)
get_posterior_mean(stanfit,pars=1)
get_posterior_mean(stanfit,pars=coefs[1])
get_posterior_mean(stanfit,pars="coefs[1]")
la <- extract(stanfit, permuted = TRUE) # return a list of arrays
ls$mu
str(la)
plot(la$coefs[,1])
hist(la$coefs[,1])
dir()
dir(pattern="csv")
samples <- dir(pattern="csv")
stanfit <- read_stan_csv(samples)
str(stanfit)
summary(stanfit)
print(stanfit)
traceplot(stanfit)
