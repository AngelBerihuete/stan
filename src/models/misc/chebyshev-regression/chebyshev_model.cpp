// Code generated by Stan version 1.3

#include <stan/model/model_header.hpp>

namespace chebyshev_model_namespace {

using std::vector;
using std::string;
using std::stringstream;
using stan::agrad::var;
using stan::model::prob_grad_ad;
using stan::math::get_base1;
using stan::math::stan_print;
using stan::io::dump;
using std::istream;
using namespace stan::math;
using namespace stan::prob;
using namespace stan::agrad;

typedef Eigen::Matrix<double,Eigen::Dynamic,1> vector_d;
typedef Eigen::Matrix<double,1,Eigen::Dynamic> row_vector_d;
typedef Eigen::Matrix<double,Eigen::Dynamic,Eigen::Dynamic> matrix_d;

class chebyshev_model : public prob_grad_ad {
private:
    int N;
    int K;
    vector<double> x;
    vector<double> y;
public:
    chebyshev_model(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : prob_grad_ad::prob_grad_ad(0) {
        static const char* function__ = "chebyshev_model_namespace::chebyshev_model(%1%)";
        (void) function__; // dummy call to supress warning
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        context__.validate_dims("data initialization", "N", "int", context__.to_vec());
        N = int(0);
        vals_i__ = context__.vals_i("N");
        pos__ = 0;
        N = vals_i__[pos__++];
        context__.validate_dims("data initialization", "K", "int", context__.to_vec());
        K = int(0);
        vals_i__ = context__.vals_i("K");
        pos__ = 0;
        K = vals_i__[pos__++];
        context__.validate_dims("data initialization", "x", "double", context__.to_vec(N));
        stan::math::validate_non_negative_index("x", "N", N);
        x = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("x");
        pos__ = 0;
        size_t x_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < x_limit_0__; ++i_0__) {
            x[i_0__] = vals_r__[pos__++];
        }
        context__.validate_dims("data initialization", "y", "double", context__.to_vec(N));
        stan::math::validate_non_negative_index("y", "N", N);
        y = std::vector<double>(N,double(0));
        vals_r__ = context__.vals_r("y");
        pos__ = 0;
        size_t y_limit_0__ = N;
        for (size_t i_0__ = 0; i_0__ < y_limit_0__; ++i_0__) {
            y[i_0__] = vals_r__[pos__++];
        }
        // validate data
        try { 
            check_greater_or_equal(function__,N,1,"N");
        } catch (std::domain_error& e) { throw std::domain_error(std::string("Invalid value of N: ") + std::string(e.what())); };
        try { 
            check_greater_or_equal(function__,K,1,"K");
        } catch (std::domain_error& e) { throw std::domain_error(std::string("Invalid value of K: ") + std::string(e.what())); };

        // validate transformed data

        set_param_ranges();
    } // dump ctor

    void set_param_ranges() {
        num_params_r__ = 0U;
        param_ranges_i__.clear();
        num_params_r__ += K;
    }

    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__) {
        stan::io::writer<double> writer__(params_r__,params_i__);
        size_t pos__;
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;


        if (!(context__.contains_r("coefs")))
            throw std::runtime_error("variable coefs missing");
        vals_r__ = context__.vals_r("coefs");
        pos__ = 0U;
        context__.validate_dims("initialization", "coefs", "vector_d", context__.to_vec(K));
        vector_d coefs(K);
        for (int j1__ = 0U; j1__ < K; ++j1__)
            coefs(j1__) = vals_r__[pos__++];
        writer__.vector_unconstrain(coefs);
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }

    var log_prob(vector<var>& params_r__,
                 vector<int>& params_i__,
                 std::ostream* pstream__ = 0) {
      return log_prob_poly<true,var>(params_r__,params_i__,pstream__);
    }

    template <bool propto__, typename T__>
    T__ log_prob_poly(vector<T__>& params_r__,
                      vector<int>& params_i__,
                      std::ostream* pstream__ = 0) {

        T__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning

        T__ lp__(0.0);

        // model parameters
        stan::io::reader<T__> in__(params_r__,params_i__);

        Eigen::Matrix<T__,Eigen::Dynamic,1>  coefs = in__.vector_constrain(K,lp__);
        (void) coefs;  // supress unused variable warning

        // transformed parameters
        Eigen::Matrix<T__,Eigen::Dynamic,1>  y_estim(K);
        stan::agrad::fill(y_estim,DUMMY_VAR__);

        // initialized transformed params to avoid seg fault on val access
                stan::agrad::fill(y_estim,DUMMY_VAR__);

        for (int i = 1; i <= N; ++i) {
            assign(get_base1_lhs(y_estim,i,"y_estim",1), eval_chebyshev(coefs,get_base1(x,i,"x",1)));
        }

        // validate transformed parameters
        for (int i0__ = 0; i0__ < K; ++i0__) {
            if (stan::agrad::is_uninitialized(y_estim(i0__))) {
                std::stringstream msg__;
                msg__ << "Undefined transformed parameter: y_estim" << '[' << i0__ << ']';
                throw std::runtime_error(msg__.str());
            }
        }

        const char* function__ = "validate transformed params %1%";
        (void) function__; // dummy to suppress unused var warning
        // model body
        {
            Eigen::Matrix<T__,Eigen::Dynamic,1>  mu(K);
            stan::agrad::fill(mu,DUMMY_VAR__);
            Eigen::Matrix<T__,Eigen::Dynamic,Eigen::Dynamic>  Sigma(K,K);
            stan::agrad::fill(Sigma,DUMMY_VAR__);
            assign(Sigma, diag_matrix(rep_vector(1,K)));
            assign(mu, rep_vector(0,K));
            lp__ += stan::prob::multi_normal_log<true>(coefs, mu, Sigma);
            for (int i = 1; i <= N; ++i) {
                lp__ += stan::prob::normal_log<true>(get_base1(y_estim,i,"y_estim",1), get_base1(y,i,"y",1), get_base1(Sigma,1,1,"Sigma",1));
            }
        }

        return lp__;

    } // log_prob(...var...)


    void get_param_names(std::vector<std::string>& names__) {
        names__.resize(0);
        names__.push_back("coefs");
        names__.push_back("y_estim");
    }


    void get_dims(std::vector<std::vector<size_t> >& dimss__) {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(K);
        dimss__.push_back(dims__);
    }

    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     std::ostream* pstream__ = 0) {
        vars__.resize(0);
        stan::io::reader<double> in__(params_r__,params_i__);
        static const char* function__ = "chebyshev_model_namespace::write_array(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d coefs = in__.vector_constrain(K);
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(coefs[k_0__]);
        }

        // declare and define transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        vector_d y_estim(K);

        for (int i = 1; i <= N; ++i) {
            assign(get_base1_lhs(y_estim,i,"y_estim",1), eval_chebyshev(coefs,get_base1(x,i,"x",1)));
        }

        // validate transformed parameters

        // write transformed parameters
        for (int k_0__ = 0; k_0__ < K; ++k_0__) {
            vars__.push_back(y_estim[k_0__]);
        }

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
    }


    void write_csv_header(std::ostream& o__) {
        stan::io::csv_writer writer__(o__);
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            writer__.comma();
            o__ << "coefs" << '.' << k_0__;
        }
        for (int k_0__ = 1; k_0__ <= K; ++k_0__) {
            writer__.comma();
            o__ << "y_estim" << '.' << k_0__;
        }
        writer__.newline();
    }

    template <typename RNG>
    void write_csv(RNG& base_rng__,
                   std::vector<double>& params_r__,
                   std::vector<int>& params_i__,
                   std::ostream& o__,
                   std::ostream* pstream__ = 0) {
        stan::io::reader<double> in__(params_r__,params_i__);
        stan::io::csv_writer writer__(o__);
        static const char* function__ = "chebyshev_model_namespace::write_csv(%1%)";
        (void) function__; // dummy call to supress warning
        // read-transform, write parameters
        vector_d coefs = in__.vector_constrain(K);
        writer__.write(coefs);

        // declare, define and validate transformed parameters
        double lp__ = 0.0;
        (void) lp__; // dummy call to supress warning
        vector_d y_estim(K);

        for (int i = 1; i <= N; ++i) {
            assign(get_base1_lhs(y_estim,i,"y_estim",1), eval_chebyshev(coefs,get_base1(x,i,"x",1)));
        }


        // write transformed parameters
        writer__.write(y_estim);

        // declare and define generated quantities


        // validate generated quantities

        // write generated quantities
        writer__.newline();
    }

}; // model

} // namespace

int main(int argc, const char* argv[]) {
    try {
        stan::gm::nuts_command<chebyshev_model_namespace::chebyshev_model>(argc,argv);
    } catch (std::exception& e) {
        std::cerr << std::endl << "Exception: " << e.what() << std::endl;
        std::cerr << "Diagnostic information: " << std::endl << boost::diagnostic_information(e) << std::endl;
        return -1;
    }
}

